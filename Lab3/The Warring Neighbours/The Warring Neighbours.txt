/* Homework: Lab3 Safety & Progress
*
* The Warring Neighbors
*
* Name: Calvin
* Surname: Bulla
*
* Name: Han
* Surname: Yang
*
*/

const False = 0
const True = 1
range Bool = False..True
set BoolActions = {setTrue, setFalse, [False], [True]}

BOOLVAR = VAL[False],
VAL[v:Bool] = ( setTrue -> VAL[True]
              | setFalse -> VAL[False]
              | [v] -> VAL[v]
              ).
||FLAGS = ( flag1:BOOLVAR || flag2:BOOLVAR ).

NEIGHBOUR1 = ( flag1.setTrue -> TEST ),
TEST = ( flag2[raised:Bool] -> 
              if (raised) then (flag1.setFalse -> NEIGHBOUR1)
              else (enter -> exit -> flag1.setFalse -> NEIGHBOUR1)
        )
        + {{flag1,flag2}.BoolActions}.

NEIGHBOUR2 = ( flag2.setTrue -> TEST ),
TEST = ( flag1[raised:Bool] -> 
              if (raised) then (flag2.setFalse -> NEIGHBOUR2)
              else (enter -> exit -> flag2.setFalse -> NEIGHBOUR2)
        )
        + {{flag1,flag2}.BoolActions}.

property MUTEX = ( n1.enter -> n1.exit -> MUTEX | n2.enter -> n2.exit-> MUTEX).
||FIELD = ( n1:NEIGHBOUR1 ||n2: NEIGHBOUR2 || {n1,n2}::FLAGS|| MUTEX).

progress ENTER1 = {n1.enter} //NEIGHBOUR 1 always gets to enter
progress ENTER2 = {n2.enter} //NEIGHBOUR 2 always gets to enter

||GREEDY = FIELD << {n1.flag1.setTrue, n2.flag2.setTrue}.

/*

The problem with the greedy neightbours is an example of a livelock.

If we give high priority to both neighbors to raise their flag (set value to true),
none of them will make any progress.

The two sub-processes (neighbours) will check the value of the flag at the same time.
They get the same result ("true") and will not enter.
This situation will last forever due to the concurrency of the two sub-processes. 

*/
