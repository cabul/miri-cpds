/* Homework: Lab4 Peterson exclusion algorithm & Basics on Erlang
*
* Peterson's exclusion algorithm
*
* Name: Calvin
* Surname: Bulla
*
* Name: Han
* Surname: Yang
*
*/

const False = 0
const True = 1
range Bool = False..True
range Card = 1..2

set BoolActions = {setTrue, setFalse, [False], [True]}
set CardActions = {set1,set2,[1],[2]}


BOOLVAR = VAL[False],
VAL[v:Bool] = ( setTrue -> VAL[True]
              | setFalse -> VAL[False]
              | [v] -> VAL[v]
              ).
			  
//CARDVAR is the shared indicator which can turn value 1 or 2	  
CARDVAR = CARDVAL[1],
CARDVAL[i:Card] = ( set1 -> CARDVAL[1] 
                  | set2 -> CARDVAL[2] 
                  | [i] -> CARDVAL[i]
				  ).
				  
||FLAGS = ( turn:CARDVAR || flag1:BOOLVAR || flag2:BOOLVAR ).

NEIGHBOUR1 = ( flag1.setTrue -> turn.set2 -> TEST ),
TEST = ( flag2[raised:Bool] -> turn[number:Card] -> 
              if ( raised && number==2 ) then (flag1.setFalse -> NEIGHBOUR1)
              else (enter -> pick -> exit -> flag1.setFalse -> NEIGHBOUR1)
        )
        + {{flag1,flag2}.BoolActions}.

NEIGHBOUR2 = ( flag2.setTrue -> turn.set1 -> TEST ),
TEST = ( flag1[raised:Bool] -> turn[number:Card] -> 
              if ( raised && number==1 ) then (flag2.setFalse -> NEIGHBOUR2)
              else (enter -> pick -> exit -> flag2.setFalse -> NEIGHBOUR2)
        )
        + {{flag1,flag2}.BoolActions}.

property MUTEX = ( n1.enter -> n1.pick -> n1.exit -> MUTEX | n2.enter -> n2.pick -> n2.exit-> MUTEX).
||FIELD = ( n1:NEIGHBOUR1 ||n2: NEIGHBOUR2 || {n1,n2}::FLAGS|| MUTEX).

progress ENTER1 = {n1.enter} //NEIGHBOUR 1 always gets to enter
progress ENTER2 = {n2.enter} //NEIGHBOUR 2 always gets to enter

||GREEDY = FIELD << {n1.flag1.setTrue, n2.flag2.setTrue}.
