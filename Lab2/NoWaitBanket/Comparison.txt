Comparison between Banket and NoWaitBanket
==========================================

Banket uses the wait() and notifyAll() functions in its synchronization mechanism.
If the thread can't be executed immediately, wait() puts it into a queue.
The thread will wait until someone notifies it, and then executes sequentially. 

NoWaitBanket uses if-else in its synchronization mechanism.
Every time the critical region is entered the condition is checked.
If it is met (e.g. servings in pot), the thread continues its execution.
In the other case the thread (savage) will quit without doing anything.

Advantages and disadvantages
----------------------------

In the normal Banket, the synchronization is handled by the Pot.
Whenever a condition is not met, the thread waits, until it is woken up.
This happens in an asynchronous manner. Furthermore we have control
of when we want to wake up a thread with notify() or notifyAll().
But since it keeps all waiting threads in memory, it's more memory expensive. 

In the NoWaitBanket we don't have this control. It is more remeniscent
of active polling. We basically have a lot of threads checking the condition
and goint to sleep again, instead of notifying each one of them once a change
has occured.

Conclusion
----------

This example is very simple, but we have to think about correctness
in a more complicated case. Let's consider for example, that after getting his
serving a savage wants to brush his teeth.

SAVAGE=(getserving -> brushteeth -> SAVAGE).

In the case of NoWaitBanket the savage thread can return from getserving()
and then proceed to brushteeth() without having eaten anything.

So if getserving() is required to consume one serving, the solution in Banket
is more accurate.
